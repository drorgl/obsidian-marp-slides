import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copy } from 'esbuild-plugin-copy';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"chromium-bidi/lib/cjs/bidiMapper/bidiMapper.js",
		"emitter",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",		
		...builtins],
	format: "cjs",
	target: ['chrome60', 'firefox60', 'safari11', 'edge18'],
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	external: ['@marp-team/marp-cli', 'obsidian'],
	define: {
		"process.env": '{}',
		"process.platform": '"x"',
		"global": "window",
		"process.version": '"10000"',
		"process": "window",
	},
	inject: [
		"esbuild.inject.js"
	],
	alias: {
		'zlib': 'zlib-browserify',
		"os": "os-browserify",
		"path": "path-browserify",
		"url":"url-browserify",
		'fs': 'memfs',
		"crypto": "crypto-browserify",
		"events":"events-browserify",
		"stream":"stream-browserify",
		"util":"util-browserify",
		'assert': 'assert-browserify',
		'https': 'https-browserify',
		'tls': 'tls-browserify',
		'net': 'net-browserify',
		'process': 'process-browserify/browser',
		'constants': 'constants-browserify',
		"http":"stream-http",
		"querystring":"querystring-es3",
		"request": "browser-request",
		"buffer": "buffer-browserify",
	},
	//outfile: "vault/.obsidian/plugins/marp-slides/main.js", //for local dev!!!
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}